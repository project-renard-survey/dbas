image: docker

.job-template: &add-services
  services:
    - name: $CI_REGISTRY/cn-tsn/project/dbas/dbas/db:testing
      alias: db
    - name: hhucn/dbas-search:develop
      alias: search
  image: $CI_REGISTRY/cn-tsn/project/dbas/dbas:experimental
  variables:
    DB_HOST: db
    DB_PORT: "5432"
    DB_USER: "postgres"
    DB_PW: "DXxCNtfnt!MOo!f8LY1!P%sw3KGzt@s!"

    # for search
    DB_NAME: discussion
    SEARCH_PORT: 5000
    DBAS_PROTOCOL: http
    SEARCH_NAME: search

    AUTHN_SECRET: "89#s3cr3t_15"
    URL: "https://dbas.cs.uni-duesseldorf.de"
  before_script:
    - alembic upgrade head && pserve development.ini --reload &

# ------------------------------------------------------------------------------
# Job definitions

build_test_images:
  stage: build
  tags:
    - 40c
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE --pull .
    - docker tag $CI_REGISTRY_IMAGE $CI_REGISTRY_IMAGE:experimental
    - docker push $CI_REGISTRY_IMAGE:experimental
    # Build database
    - docker build -t $CI_REGISTRY_IMAGE/db --pull docker/db
    - docker tag $CI_REGISTRY_IMAGE/db $CI_REGISTRY_IMAGE/db:testing
    - docker push $CI_REGISTRY_IMAGE/db:testing

build_frontend_test_image:
  stage: build
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - cd frontendtest
    - docker build -t $CI_REGISTRY_IMAGE/frontendtest --pull .
    - docker push $CI_REGISTRY_IMAGE/frontendtest

frontend:
  stage: test
  image: docker:dind
  variables:
    AUTHN_SECRET: '89#s3cr3t_15'
    DB_HOST: db_$CI_JOB_ID
    DB_PORT: '5432'
    DB_USER: 'postgres'
    DB_PW: 'DXxCNtfnt!MOo!f8LY1!P%sw3KGzt@s!'
    DB_NAME: 'discussion'
    DBAS_PORT: '4284'
    DBAS_PROTOCOL: 'http'
  before_script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker pull $CI_REGISTRY/cn-tsn/project/dbas/dbas/db:testing
    - docker pull $CI_REGISTRY/cn-tsn/project/dbas/dbas:experimental
    - docker pull $CI_REGISTRY_IMAGE/frontendtest
    - docker network create -d bridge dbas_$CI_JOB_ID
    - docker run -d --name db_$CI_JOB_ID --net=dbas_$CI_JOB_ID $CI_REGISTRY_IMAGE/db:testing
    - sleep 8
    - docker run -d --name web_$CI_JOB_ID --net=dbas_$CI_JOB_ID -e AUTHN_SECRET=$AUTHN_SECRET -e DB_HOST=$DB_HOST -e DB_PORT=$DB_PORT -e DB_USER=$DB_USER -e DB_PW=$DB_PW -e DB_NAME=$DB_NAME $CI_REGISTRY_IMAGE:experimental
    - sleep 5
    - docker run -di --name frontendtest_$CI_JOB_ID --net=dbas_$CI_JOB_ID $CI_REGISTRY_IMAGE/frontendtest
  script:
    - docker exec frontendtest_$CI_JOB_ID bash -c "node_modules/.bin/cypress run --env WEB_HOST=web_$CI_JOB_ID,WEB_PORT=$DBAS_PORT,WEB_PROTOCOL=$DBAS_PROTOCOL"
    - docker exec frontendtest_$CI_JOB_ID bash -c "node_modules/.bin/cypress run --env WEB_HOST=web_$CI_JOB_ID,WEB_PORT=$DBAS_PORT,WEB_PROTOCOL=$DBAS_PROTOCOL --browser chrome"
  after_script:
    - mkdir cypress_artifacts/
    - docker cp frontendtest_$CI_JOB_ID:/cypress cypress_artifacts/
    - docker kill db_$CI_JOB_ID web_$CI_JOB_ID frontendtest_$CI_JOB_ID || true
    - docker network rm dbas_$CI_JOB_ID || true
  artifacts:
    paths:
      - cypress_artifacts/
    expire_in: 30 mins
    when: on_failure

flake8:
  stage: test
  script:
    - apk add --no-cache python3 && python3 -m ensurepip
    - pip3 install --quiet flake8
    - flake8 .
  allow_failure: true

jshint:
  stage: test
  script:
    - apk add --no-cache yarn bash
    - yarn global add jshint
    - bash -c "jshint ./dbas/static/js/{main,ajax,discussion,review,d3}/*.js"
    - bash -c "jshint ./admin/static/js/main/*.js"
    - bash -c "jshint ./websocket/static/js/*.js"
  allow_failure: true

binaries:
  <<: *add-services
  stage: test
  script:
    - apt-get install python3
    - python3 tests/binaries.py

unit:
  <<: *add-services
  stage: test
  script:
    - nosetests --with-coverage --cover-package=dbas --cover-package=graph --cover-package=admin --cover-package=api --cover-xml -w . api.v2 dbas graph admin api.tests.test_login api.tests.test_views
  coverage: '/^TOTAL\s*\d+\s*\d+\s*(\d+\%)\s*$/'
  artifacts:
    paths:
      - coverage.xml
    expire_in: 10 mins

sonar:
  image: hhucn/sonar-scanner
  stage: deploy
  script:
    - sonar-scanner -D sonar.host.url=https://sonarqube.cs.uni-duesseldorf.de -D sonar.login=$SONARQUBE_LOGIN -D sonar.projectKey=$CI_PROJECT_NAME:$CI_COMMIT_REF_NAME -D sonar.projectName=$CI_PROJECT_NAME -D sonar.projectVersion=1.9.1 -D sonar.sources=. -D sonar.python.coverage.reportPath=coverage.xml
  only:
    - development
  when: always

deploy_image:
  stage: deploy
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE .
    - docker push $CI_REGISTRY_IMAGE
    # Build and deploy database
    - docker build -t $CI_REGISTRY_IMAGE/db --pull docker/db
    - docker push $CI_REGISTRY_IMAGE/db
  only:
    - master

deploy_dev_image:
  stage: deploy
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE .
    - docker tag $CI_REGISTRY_IMAGE $CI_REGISTRY_IMAGE:development
    - docker push $CI_REGISTRY_IMAGE:development
    # Build and deploy database
    - docker build -t $CI_REGISTRY_IMAGE/db --pull docker/db
    - docker tag $CI_REGISTRY_IMAGE/db $CI_REGISTRY_IMAGE/db:development
    - docker push $CI_REGISTRY_IMAGE/db:development
  only:
    - development

deploy_docs_image:
  stage: deploy
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE -f Dockerfile.docs --pull .
    - docker tag $CI_REGISTRY_IMAGE $CI_REGISTRY_IMAGE:docs
    - docker push $CI_REGISTRY_IMAGE:docs
  only:
    - master
